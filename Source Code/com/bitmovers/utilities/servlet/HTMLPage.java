// =============================================================================// com.bitmovers.utilities.servlet.HTMLPage// =============================================================================package com.bitmovers.utilities.servlet;import java.io.*;import java.util.*;import java.lang.reflect.*;import javax.servlet.*;import javax.servlet.http.*;import com.bitmovers.utilities.*;// =============================================================================// CLASS: HTMLPage// =============================================================================/** The HTMLPage class is a tool for developing HTTP Servlets that consist  * of one or more form input pages.  HTMLPage implements the generic code  * that handles form input and field verification from a HttpServlet.  * <p>  *  * HTMLPage is an abstract class.  The developer implementing a Servlet  * that requires form input is intended to extend this class.  Particularily,  * the developer is intended to implement the 'verifyField()' method which  * defines the verification rules for required form fields.  The implementing  * developer must also (likely in the constructor) make calls to the   * 'setFieldRequirements()' method in order to tell HTMLPage class which  * fields are required fields.  * <p>  *  * The class automatically handles HTML output through the 'outputHTML()'   * method.  When a 'formIsComplete()', the developer may also   * 'getFormFieldData()' to do something with the data that has been collected.  * <p>  *  * See the method descriptions for particular details.  * <p>  *  * @version 2000.02.27-A  * @author Chris Knight (chris.knight@bitmovers.com)  */public abstract class HTMLPage implements Serializable{  // ---------------------------------------------------------------------------    private final Hashtable requestData = new Hashtable();  private Hashtable additionalVariables = new Hashtable();  // ---------------------------------------------------------------------------  // METHOD: outputHTML  // ---------------------------------------------------------------------------    /** The outputHTML method outputs HTML based on an HTML template located    * in the 'resourceJARPath'.  This path must be the full path to a JAR    * archive which contains, in the 'Resources' folder, a HTML template of    * the same name as the implementing form input page class.  For example,     * a class called 'MyFormOne' that extended 'HTMLPage' would require    * a HTML template named 'MyFormOne.html' in the 'Resources' folder.    * An error message is output if the resource HTML template is not found    * in the JAR archive.    * <p>    *    * The 'outputHTML()' method parses the HTML template and substitutes    * field values in to the HTML, if required.  Template variables are the    * same name as a particular field name and are both preceeded and appended    * by a double-carrat ('^^').  An additional variable is also output    * for each field; this variable is a colour string that is 'red' for a     * field error and blank otherwise.   This variable has the same name as     * the form field with a '.errorColour' string appended (and with the     * surrounding double-carrats).  For example, when constructing a HTML     * template, a developer would write HTML code similar to the following:    * <p><pre>    *   &lt;font color="^^FIRST_NAME.errorColour^^"&gt;Your First Name:</font>    *   &lt;input type="text" name="FIRST_NAME" value="^^FIRST_NAME^^"&gt;    *   &lt;p&gt;    * </pre>    * <p>    *    * The implementing developer may also specify additional variables by     * passing them through the 'additionalVariables' hashtable.    * <p>    *    * This method sets the content-type of the ServletOuputStream to be    * "text/html".    * <p>    */    public void outputHTML(HttpServletResponse response, JarResources resources, Hashtable additionalVariables) throws IOException  {    // (1) Construct a new Hashtable to contain the parsed variables.  Copy    //     the formData variables into this.  Also copy the additional    //     variables.        Hashtable parsedVariables = new Hashtable();    {	    Enumeration fieldKeys = this.requestData.keys();	    	    while (fieldKeys.hasMoreElements())	    {	      Object key = fieldKeys.nextElement();	      parsedVariables.put(key, this.getRequestData().get(key)); 	    }	  }    // (2a) Copy the newly passed variables to the class's additionalVariables.    //      This is done in case this object is being re-used.        this.mergeHashtables(additionalVariables, this.additionalVariables);    // (2b) Do any pre-processing on the additional variables    {      this.additionalVariables = this.handleAdditionalVariables(this.additionalVariables);    }	  if (this.additionalVariables != null)    {	    Enumeration fieldKeys = this.additionalVariables.keys();	    	    while (fieldKeys.hasMoreElements())	    {	      Object key = fieldKeys.nextElement();	      parsedVariables.put(key, this.additionalVariables.get(key)); 	    }	  }  	  	  // (3) Get the resource file from the JAR archive and output an	  //     error if not found.  Otherwise output the parsed HTML.	  	  {	    // (3a) Get the name of the template file.  Remove the package	    //      names in the process.	  	    String rawTemplateName = this.getClass().getName();	    StringTokenizer tokens = new StringTokenizer(rawTemplateName, ".");	    String templateName = "";	    	    while (tokens.hasMoreTokens())	    {	      templateName = tokens.nextToken();	    }	    	    templateName += ".html";	    	    // (3b) Obtain raw html content from the resource JAR.	    	    //JarResources resources = new JarResources(resourceJARPath);	          String HTMLContent;            try      {        HTMLContent = new String(resources.getResource("Resources/" + templateName));      }      catch (NullPointerException exception)      {        HTMLContent = "<html><head><title>Error</title></head><body>Error, the resource file <b>" + templateName + "</b> could not be found in the <b>Resources/</b> directory of <b>" + resources.getFileName() + "</b>.";      }	            // (3c) Parse the variables into the template.            StringParser parser = new StringParser(parsedVariables);      HTMLContent = parser.parseString(HTMLContent);            // (3d) Output the HTML content.            response.setContentType("text/html");      response.getWriter().write(HTMLContent);	  }        // (4) Complete!      }    // ---------------------------------------------------------------------------  // METHOD: handleServletRequest  // ---------------------------------------------------------------------------    /** The 'handleServletRequest()' method is responsible for handling     * everything associated with a Servlet request.  This primarily consists    * of iterating through the passed parameters and setting the internal    * HTMLPage form field values.  Example Servlet-client code might    * look like the following:    * <p><pre>    *   if (!myFormPage.isComplete())    *   {    *     myFormPage.handleServletRequest(theServletRequest);    *         *     if (!myFormPage.isComplete())    *     {    *       myFormPage.outputHTML(theServletResponse, jarPath, null)    *     }    *     else    *     {    *       doNextStep();    *     }     *   }    * </pre>    * <p>    */    public final void handleServletRequest(HttpServletRequest request)  {    try    {      Enumeration names = request.getParameterNames();          while (names.hasMoreElements())      {        String name = names.nextElement().toString();        this.requestData.put(name, request.getParameter(name));       }    }    catch (NullPointerException exception)    {      System.err.println("HTMLPage.handleServletRequest(): " + exception.getClass().getName() + " (" + exception.getMessage() + ")");    }  }  // ---------------------------------------------------------------------------  // METHOD: handleAdditionalVariables  // ---------------------------------------------------------------------------  /** This 'handleAdditonalVariables()' method is responsible for handling    * any additional variables which need to be processed. This method can    * be extended to handle variables in any way seen fit.     *    */  public abstract Hashtable handleAdditionalVariables(Hashtable additionalVariables);  // ---------------------------------------------------------------------------  // METHOD: copyHashtable  // ---------------------------------------------------------------------------    /** The 'copyHashtable()' method copies the contents of the first Hashtable to    * the second Hashtable.    *    */  private void mergeHashtables(Hashtable from, Hashtable to)  {    // Copy all the key/value pairs from 'from' to 'to'.	  if (from != null)    {      if (to == null)      {        to = new Hashtable();      }      	    Enumeration fieldKeys = from.keys();	    	    while (fieldKeys.hasMoreElements())	    {	      Object key = fieldKeys.nextElement();	      to.put(key, from.get(key)); 	    }	  }	}  // ---------------------------------------------------------------------------  // METHOD: getRequestData  // ---------------------------------------------------------------------------    /** The 'getRequestData()' method returns a Hashtable containing all of    * the key/value pairs of the gathered form field data.    */    public final Hashtable getRequestData()  {    return this.requestData;  }  // ---------------------------------------------------------------------------  // METHOD: getAdditionalVariables  // ---------------------------------------------------------------------------    /** The 'getAdditionalVariables()' method returns a Hashtable containing all of    * the key/value pairs from this.additionalVariables.    */    public final Hashtable getAdditionalVariables()  {    return this.additionalVariables;  }  // ---------------------------------------------------------------------------  // METHOD: getHandlerMethods  // ---------------------------------------------------------------------------    /** The 'getHandlerMethods()' method returns an array of Method objects which    * are determined to be "callable" by the frontend. Every class which extends    * this class must override this method if they provide methods which will be    * called by the frontend. The method returns null by default.    *    * An example of this would be:    *    * <pre>    *   Class[] arguments =    *   {    *     Class.forName("java.lang.String")    *   }    *    *   Method[] methods =    *   {    *     this.getClass.getMethod("verifyLogin", arguments),    *     this.getClass.getMethod("displayHelp", null)    *   }    *    *   return methods;    * </pre>    *    */    public Method[] getHandlerMethods()  {    return null;  }  // ---------------------------------------------------------------------------}// =============================================================================// Copyright 2000 Bitmovers Communications, Inc.                             eof