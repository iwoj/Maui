// =============================================================================// com.bitmovers.utilities.network.EmailUtilities// =============================================================================package com.bitmovers.utilities.network;import java.io.*;import java.net.*;import java.util.*;// =============================================================================// CLASS: EmailUtilities// =============================================================================/** EmailUtilities is a class with a set of useful static methods for common   * email-related tasks.  *	  * @author Various Artists (variousartists@bitmovers.com)  * @version 1999.11.25  */public class EmailUtilities{	// ---------------------------------------------------------------------------      // ---------------------------------------------------------------------------  // METHOD: sendEmail  // ---------------------------------------------------------------------------    public static boolean sendEmail(String emailToAddress, String emailFromAddress, String subject, String messageContent)  {  	return EmailUtilities.sendEmail("localhost", emailToAddress, emailFromAddress, subject, messageContent);  }    public static boolean sendEmail(String SMTPServer, String emailToAddress, String emailFromAddress, String subject, String messageContent)  {    try    {      Socket socket = new Socket(SMTPServer, 25);      String hostname = socket.getLocalAddress().getHostName();      // (1) 'Dot stuff' the message content lines.      StringTokenizer contentLines = new StringTokenizer(messageContent, "\n", true);            String newContentLines = "";      newContentLines += "To: " + emailToAddress + "\r\n";      newContentLines += "From: " + emailFromAddress + "\r\n";      newContentLines += "Subject: " + subject + "\r\n\r\n";      while (contentLines.hasMoreTokens())      {        String line = contentLines.nextToken();                if (line.startsWith("."))        {          line = ("." + line);        }        newContentLines += line;      }      newContentLines += "\r\n.\r\n";      // (2) Prepare a string of lines to send to the SMTP server.      Vector linesToSend = new Vector();      linesToSend.addElement("HELO " + hostname);      linesToSend.addElement("MAIL FROM:" + emailFromAddress);      linesToSend.addElement("RCPT TO:" + emailToAddress);      linesToSend.addElement("DATA");      linesToSend.addElement(newContentLines);      linesToSend.addElement("QUIT");      // (3) Connect to the SMTP server and send the message.      PrintWriter writer = new PrintWriter(socket.getOutputStream());      BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));      Vector responseLines = new Vector();      Enumeration lines = linesToSend.elements();      responseLines.addElement(reader.readLine());            while (lines.hasMoreElements())      {        Thread.sleep(500);        String line = (String)lines.nextElement() + "\r\n";        writer.print(line);        writer.flush();                responseLines.addElement(reader.readLine());      }      socket.close();          // (4) Finally, check the response of the DATA command to       //     see if the message was sucessfully sent.  If not,       //     throw a descriptive exception.      //      //     (Note that element 5 in the responseLines is supposed      //      to be the response code from the message content...       //      if it isn't, or if it is and it is invalid, then      //      the exception will be thrown).      if (!((String)(responseLines.elementAt(5))).startsWith("2"))      {        throw new Exception("Attempted to send a message via local SMTP server, but a non-200 response code was returned while sending message contents.");      }      else      {	  	  System.err.println("EmailUtilities.sendEmail() has delivered a message to '" + emailToAddress + "'.");	  	  return true;	  	}    }    catch (Exception exception)    {		  System.err.println("EmailUtilities.sendEmail() has experienced an Exception (" + exception.getClass().getName() + ": " + exception.getMessage() + ").");		  return false;    }	}		// ---------------------------------------------------------------------------}