// =============================================================================// com.bitmovers.util.MemoryMonitor// =============================================================================package com.bitmovers.utilities;import java.io.*;// =============================================================================// CLASS: MemoryMonitor// =============================================================================public class MemoryMonitor implements Runnable, Serializable{	// ---------------------------------------------------------------------------		private PrintStream printStream;	private long lastMeasurement;	private long delay;	private Runtime runtime = Runtime.getRuntime();		long freeMemory;	long totalMemory;		// ---------------------------------------------------------------------------	// CONSTRUCTOR	// ---------------------------------------------------------------------------		public MemoryMonitor()	{		this(10000, System.out);	}		public MemoryMonitor(PrintStream printStream)	{		this(10000, printStream);	}		public MemoryMonitor(long delay)	{		this(delay, System.out);	}		public MemoryMonitor(long delay, PrintStream printStream)	{		this.printStream = printStream;		this.delay = delay;		this.lastMeasurement = System.currentTimeMillis();	}			// ---------------------------------------------------------------------------	// METHOD: run	// ---------------------------------------------------------------------------		/** This thread will take a regularly repeating measurement based on the delay	  * set during construction.	  */	  	public void run()	{		while (true)		{			try			{				Thread.sleep(1000);				if (System.currentTimeMillis() > this.lastMeasurement + this.delay)				{					this.measureMemory();				}			}			catch (InterruptedException e)			{				this.printStream.println("MemoryMonitor interrupted.");			}		}	}			// ---------------------------------------------------------------------------	// METHOD: measureMemory	// ---------------------------------------------------------------------------		/** This method measures the virtual machine's current memory status and 	  * outputs the results to the PrintStream specified during construction. 	  * Calling this method will also reset the measurement timer used by the 	  * <code>run()</code> method.	  */		public synchronized void measureMemory()	{		this.measureMemory(null);	}		public synchronized void measureMemory(String flag)	{		this.freeMemory = this.runtime.freeMemory();		this.totalMemory = this.runtime.totalMemory();		int percent = (int)((float)freeMemory/(float)totalMemory * 100f);				if (flag == null)		{			this.printStream.println("Memory usage: " + percent + "% (" + (this.freeMemory/(1024*1024)) + "MB/" + (this.totalMemory/(1024*1024)) + "MB)");		}		else		{			this.printStream.println("Memory usage (" + flag + "): " + percent + "% (" + (this.freeMemory/(1024*1024)) + "MB/" + (this.totalMemory/(1024*1024)) + "MB)");		}				this.lastMeasurement = System.currentTimeMillis();	}		// ---------------------------------------------------------------------------}