// =============================================================================// com.bitmovers.maui.cache// =============================================================================package com.bitmovers.utilities;import java.util.Properties;import java.io.IOException;import java.io.FileInputStream;/*** PropertiesLoader SINGLETON <p>* Utility class to load properties from command line arguments.  The properties* can specified directly in the parameters, or through a file (by prefixing the file* name with "@").  There can be any combination of inline arguments and files.  Inline* arguments are of the format "key=value" or "-key=value".**/public class PropertiesLoader{	private final static PropertiesLoader propertiesLoader = new PropertiesLoader ();		/**	* Prevents instantiation	*/	private PropertiesLoader ()	{	}		/**	* This is a singleton.	*	* @return The single properties loader reference	*/	public static PropertiesLoader getInstance ()	{		return propertiesLoader;	}		/**	* Load properties from a file.	*	* @param aFile The file to load from	* @param aProperties The target Properties object	*/	protected void loadPropertiesFromFile (final String aFile,									  	   final Properties aProperties)	{		try		{			aProperties.load (new FileInputStream (aFile));		}		catch (IOException e)		{			System.out.println ("Failed to load property file " + aFile + " because : " + e);		}				}		protected void loadPropertyFromArgument (final String aArgument,											 final Properties aProperties)	{		String theArgument = (aArgument.startsWith ("-") ?								aArgument.substring (1) :								aArgument);		int theEquals = theArgument.indexOf ("=");		if (theEquals != -1)		{			String theKey = theArgument.substring (0, theEquals);			String theValue = theArgument.substring (theEquals + 1);			aProperties.put (theKey, theValue);		}		else		{			System.out.println ("Invalid property specification " +									aArgument);		}	}		/**	* Load a new set of properties from the arguments passed in	*	* @aArgs The String array of arguments	*	* @return The new Properties object	*/	public Properties loadProperties (final String [] aArgs)	{		return loadProperties (aArgs, new Properties ());	}		/**	* Amend the Properties object with the new collection of arguments	*	* @param aArgs The String array of arguments	* @param aProperties The Properties to store the result.  This Properties can contain	* 					 properties (eg. default values), and these may be amended by this	*					 method.	*	* @return The Properties object passed in, or a new Properties object if aProperties is null	*/	public Properties loadProperties (final String [] aArgs,									  final Properties aProperties)	{		Properties retVal = (aProperties == null ? new Properties () :												   aProperties);												   		if (aArgs != null && aArgs.length > 0)		{			for (int i = 0; i < aArgs.length; i++)			{				//				//	Scan through each parameter				//				if (aArgs [i].startsWith ("@"))				{					//					//	This a file reference					//					loadPropertiesFromFile (aArgs [i].substring (1), retVal);				}				else				{					loadPropertyFromArgument (aArgs [i], retVal);				}			}		}		return retVal;	}}