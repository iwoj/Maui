// ==========================================================================// com.bitmovers.utilities.PoDate// ==========================================================================package com.bitmovers.utilities;import java.sql.*;// ==========================================================================// CLASS: PoDate// ==========================================================================/** The PoDate class overrides the java.util.Date class in order to customize	* the toString() method.  *  * @version 1999.10.12-A  * @author Patrick Gibson (patrick@bitmovers.com),  *         Chris Knight (chris@bitmovers.com)  */public class PoDate{  // -----------------------------------------------------------------------  // CLASS VARIABLES  // -----------------------------------------------------------------------	java.util.Date date;	  // -----------------------------------------------------------------------  // CONSTRUCTORS  // -----------------------------------------------------------------------	public PoDate(java.util.Date date)	{		this.date = date;	}	public PoDate(String dateTimeString)	{    int x = 0;    try    {      String datePattern = "yyyy-MM-dd hh:mm:ss";      java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat(datePattern);      java.util.Date date = dateFormat.parse(dateTimeString);			this.date = date;    }    catch (Exception exception)    {      // System.out.println("****: ++ " + dateTimeString + " ++ :**** [" + exception.getClass().getName() + "/" + exception.getMessage() + "] [x=" + x + "]");      this.date = new java.util.Date(0);    }	}	  // -----------------------------------------------------------------------  // METHOD: toString()  // -----------------------------------------------------------------------	public String toString()	{		try		{			String[] months = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};						int month = date.getMonth();			int day = date.getDate();			int year = date.getYear() ;			// When the date is null in the database, java.sql.date returns 10,30,-1898 as the			// date. Since this is not a valid date, 'Not specified' will be returned.			if ((month == 10) && (day == 30) && (year == -1898))			{				return "Not specified";			}			else			{				return months[month] + " " + day + ", " + (year + 1900);			}		}		catch (Exception e)		{			return "Not specified";		}	}	public static String toString(java.util.Date date)	{		return (new PoDate(date)).toString();	}	public static String toString(java.sql.Date date)	{		return (new PoDate((java.util.Date)date)).toString();	}  // -----------------------------------------------------------------------  // METHOD: toDateAndTimeString()  // -----------------------------------------------------------------------    public String toDateAndTimeString()  {    int hour = this.date.getHours();    int minute = this.date.getMinutes();        String hourString = "" + hour;    String minuteString = "" + minute;        if (hour < 10) {  hourString = ("0" + hourString);  }    if (minute < 10) {  minuteString = ("0" + minuteString);  }        return (this.toString() + " " + hourString + ":" + minuteString);  }  public static String toDateAndTimeString(java.util.Date date)  {		return (new PoDate(date)).toDateAndTimeString();  }  public static String toDateAndTimeString(java.sql.Date date)  {		return (new PoDate((java.util.Date)date)).toDateAndTimeString();  }  // -----------------------------------------------------------------------}